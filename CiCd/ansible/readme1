ANSIBLE

Главная цель Ansible — это с одного (можно сделать и пару) серверов с ансиблом можно было управлять всеми другими нодами. 
С такого сервера можно отправлять различные команды (набор некоторых инструкций, так называемых playbooks) на любую из подключенных нод на сервере. 
Выполнение команд выполняется путем подключения сервера к ноде через публичный ключ по SSH

В файле «Host inventory» содержится информация о обслуживаемых нодах ( где собственно все команды будут исполнены). 
Конфигурационный файл с Ansible может быть использован для настройки  переменного окружения.

В ansible, используются playbooks — это набор инструкций и они состоят из задач. 
Плейбуки описываются с помощью функциональности модуля ядра самого Ansible ( так же, могут использовать сторонние модули). 
Playbooks — последовательность или набор команд в которых  так же, может использоваться различные проверки: 
если условие не выполняется, то определенные команды могут пропускаться. Данные кукбуки, описываются в формате YAML.

С Ansible API — вы можете запускать скрипты. Если скрипту-обертке (wrapper) может понадобится запуск playbook, то это можно сделать через API.

Настройка Ansible в Unix/Linux

Сам конфигурационный файл описывается в формате INI.
Так же, имеется возможность переопределения части конфигурации( можно даже всего конфига) в параметрах playbook или в переменных окружения.
При выполнении команд, Ansible выполняет проверку и ищет наличия файла с конфигурациями в следующих расположениях:
Параметр ANSIBLE_CONFIG проверяется переменная окружения, который может быть указывать на файл конфигурации.

./ansible.cfg – в текущей папке.
~/.ansible.cfg — в домашней директории пользователя.
/etc/ansible/ansible.cfg — в папке, смого ansible.

Настройка через переменные окружения

Много опций, можно задать с помощью переменного окружения, 
для этого стоит использовать префикс ANSIBLE_ перед названием самого параметра с конфигурацией (большими буквами).

export ANSIBLE_SUDO_USER=root

После чего переменная ANSIBLE_SUDO_USER может быть использована в playbook.

Настройка в ansible.cfg

hostfile: Данная опция указывает на путь к inventory file. 
В нем хранится список ваших хостов, к которым Ansible сможет выполнить подключение.
Например: hostfile = /etc/ansible/hosts

library: Путь к папке. В ней сохранены все модули Ansible.
Например: library = /usr/share/ansible

forks: Задается количество процессов, которые может породить Ansible. По-умолчанию параметр установлен в 5.
Например: forks = 5

sudo_user: Пользователь который будет использоватся по умолчанию и от которого Ansible собственно будет выполнять запуск команд на удаленных нодах.
Например: sudo_user = root

remote_port: Порт для соединения по SSH к нодам (по умолчанию использует стандартный 22-й порт).
Например: remote_port = 22

host_key_checking: Данная опция  дает возможность выключить проверку SSH–ключа на хосте, но по-умолчанию даная проверка включена.
Например: host_key_checking = False

timeout: Данная опция задает таймаут ( время попытки подключения по SSH).
Например: timeout = 60

log_path: Путь для сохранения лог-файлов. По-умолчанию Ansible не сохранит их вообще.
Например: log_path = /var/log/ansible.log


Файл конфигурации Ansible

1 подключиться по SSH к серверу где установлен Ansible. 
2 создать папку для всех проектов
mkdir ~/ansible
cd ~/ansible
3 создать директорию для сохранения всех модулей для Ansible и так же, директорию для сохранения всех логов
mkdir ~/ansible/modules
mkdir ~/ansible/logs
4 файл ansible.cfg
vim ~/ansible/ansible.cfg
>>
[defaults]
hostfile = ~/ansible/inventory
sudo_user = root
log_path = ~/ansible/logs/ansible.log
>>> В новой версии ansible поля «hostfile»  >> inventory =  /etc/ansible/hosts
6
vim ~/ansible/inventory
>>
[name_of_group]
alias ansible_ssh_node=IP_of_SERVER
some_your_host ansible_ssh_host=SERVER_IP
>>
[experiments]
10.172.1.201
alias ansible_ssh_host=10.172.1.201


Генерация ключа для ansible

Сгенерировать
ssh-keygen 
ssh-keygen -t rsa -b 4096 -C "ws@ws.ws"
>> Создать простой ключ, все пропускаем (нажимаем enter на все вопросы).

Заблокировать доступ к SSH каталогу, только cмог данный пользователь читать или писать в данную папку:
chmod 700 ~/.ssh

Нужно изменить разрешения, чтобы сохранить этоти файлы в безопасности:
chmod 600 ~/.ssh/id_rsa && chmod 644 ~/.ssh/id_rsa.pub

После того как ключ сгенерирован, нужно его передать на все имеющийся ноды:
ssh-copy-id user@ip

Проверка
ssh user@ip

Опция «-m ping» — часть команды для анзибль которая дает возможность использовать модуль «Ping».
ansible ansible_gruop -m ping
ansible -m ping all
ansible -m ping host
ansible -m ping host1:host1

Модуль «shell» позволяет послать команду на удаленный хост и получить результаты.
Например, чтобы узнать использование памяти на host1
ansible -m shell -a 'free -m' host1
ansible -m command -a "df -h" ip

Проверка аптайма на серверах:
ansible -m command -a "uptime" group_ansible

Проверить hostname и архитектуру на всех нодах:
ansible -m command -a "arch" group_ansible
ansible -m shell -a "hostname" group_ansible
>> to-file >> ansible -m command -a "df -h" group_insible > /../../df_report.txt


Управление ansible конфигурациями

Работаем с playbook-ами

На playbook-ах основан собственно весь ansible, так как они служат ( содержат) для выполнения разных задач. 
Каждая написанная задача внутри самого Ansible использует кусок кода-модуля. 
Плейбуки, используют формат YAML, но собственно, любые другие ваши модули могут быть написаны на любом языке программирования.

Хочу заметить, что очень важно, чтобы формат сообщений от модулей был в JSON.

YAML

Каждый плейбук пишется на языке YAML и для ансибл, почти каждый YAML файл начинается с некоторого списка, 
а этот элемент данного списка — список пар «ключ-значение»(иногда зовут словарем).

Данные файлы обязаны начинаться с «—» (такой формат присущий YAML )и означает начало вашего документа.

Так же, все ваши списки должны находится с одинаковым отступом от начала каждой строки, и должны начинаться с пробела или «-«. 
Чтобы закомментировать, используйте «#».







































