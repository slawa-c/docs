HTTPS

Чтобы настроить HTTPS-сервер, необходимо включить параметр ssl на слушающих сокетах в блоке server, 
а также указать местоположение файлов с сертификатом сервера и секретным ключом:

server {
    listen              443 ssl;
    server_name         www.ws.ws;
    ssl_certificate     www.ws.ws.crt;
    ssl_certificate_key www.ws.ws.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ...
}

Сертификат сервера является публичным. Он посылается каждому клиенту, соединяющемуся с сервером. 
Секретный ключ следует хранить в файле с ограниченным доступом (права доступа должны позволять главному процессу nginx читать этот файл). 
Секретный ключ можно также хранить в одном файле с сертификатом:

    ssl_certificate     www.ws.ws.cert;
    ssl_certificate_key www.ws.ws.cert;
при этом права доступа к файлу следует также ограничить. Несмотря на то, что и сертификат, и ключ хранятся в одном файле, клиенту посылается только сертификат.

С помощью директив ssl_protocols и ssl_ciphers можно ограничить соединения использованием только “сильных” версий и шифров SSL/TLS. 
По умолчанию nginx использует “ssl_protocols TLSv1 TLSv1.1 TLSv1.2” и “ssl_ciphers HIGH:!aNULL:!MD5”, поэтому их явная настройка в общем случае не требуется. 
Следует отметить, что значения по умолчанию этих директив несколько раз менялись.

Оптимизация HTTPS-сервера

SSL-операции потребляют дополнительные ресурсы процессора. 
На мультипроцессорных системах следует запускать несколько рабочих процессов, не меньше числа доступных процессорных ядер. 
Наиболее ресурсоёмкой для процессора является операция SSL handshake, в рамках которой формируются криптографические параметры сессии. 
Существует два способа уменьшения числа этих операций, производимых для каждого клиента: использование постоянных (keepalive) соединений, 
позволяющих в рамках одного соединения обрабатывать сразу несколько запросов, и повторное использование параметров SSL-сессии для предотвращения 
необходимости выполнения SSL handshake для параллельных и последующих соединений. 
Сессии хранятся в кэше SSL-сессий, разделяемом между рабочими процессами и настраиваемом директивой ssl_session_cache. 
В 1 мегабайт кэша помещается около 4000 сессий. 
Таймаут кэша по умолчанию равен 5 минутам. Он может быть увеличен с помощью директивы ssl_session_timeout. 

пример конфигурации, оптимизированной под многоядерную систему с 10-мегабайтным разделяемым кэшем сессий:

worker_processes auto;

http {
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen              443 ssl;
        server_name         www.ws.ws;
        keepalive_timeout   70;

        ssl_certificate     www.ws.ws.crt;
        ssl_certificate_key www.ws.ws.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ...
        

Цепочки SSL-сертификатов

Некоторые браузеры могут выдавать предупреждение о сертификате, подписанном общеизвестным центром сертификации, 
в то время как другие браузеры без проблем принимают этот же сертификат. 
Так происходит потому, что центр, выдавший сертификат, подписал его промежуточным сертификатом, 
которого нет в базе данных сертификатов общеизвестных доверенных центров сертификации, распространяемой вместе с браузером. 
В подобном случае центр сертификации предоставляет “связку” сертификатов, которую следует присоединить к сертификату сервера. 
Сертификат сервера следует разместить перед связкой сертификатов в скомбинированном файле:

$ cat www.ws.ws.crt bundle.crt > www.ws.ws.chained.crt

Полученный файл следует указать в директиве ssl_certificate:

server {
    listen              443 ssl;
    server_name         www.ws.ws;
    ssl_certificate     www.ws.ws.crt;
    ssl_certificate_key www.ws.ws.key;
    ...
}
Если сертификат сервера и связка сертификатов были соединены в неправильном порядке, nginx откажется запускаться и выдаст сообщение об ошибке:

SSL_CTX_use_PrivateKey_file(" ... /www.ws.ws.key") failed
   (SSL: error:0B080074:x509 certificate routines:
    X509_check_private_key:key values mismatch)
поскольку nginx попытается использовать секретный ключ с первым сертификатом из связки вместо сертификата сервера.

Браузеры обычно сохраняют полученные промежуточные сертификаты, подписанные доверенными центрами сертификации, 
поэтому активно используемые браузеры уже могут иметь требуемые промежуточные сертификаты и не выдать предупреждение о сертификате, 
присланном без связанной с ним цепочки сертификатов. 
Убедиться в том, что сервер присылает полную цепочку сертификатов, можно при помощи утилиты командной строки openssl, например:

openssl s_client -connect www.ws.ws:443





